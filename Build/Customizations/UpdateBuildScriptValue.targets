<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright (c) rubicon IT GmbH, www.rubicon.eu
 !
 ! See the NOTICE file distributed with this work for additional information
 ! regarding copyright ownership.  rubicon licenses this file to you under 
 ! the Apache License, Version 2.0 (the "License"); you may not use this 
 ! file except in compliance with the License.  You may obtain a copy of the 
 ! License at
 !
 !   http://www.apache.org/licenses/LICENSE-2.0
 !
 ! Unless required by applicable law or agreed to in writing, software 
 ! distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 ! WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the 
 ! License for the specific language governing permissions and limitations
 ! under the License.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <RemotionBuildFile Condition="'$(RemotionBuildFile)' == ''">$(SolutionDirectory)\BuildScript\Main\Remotion.build</RemotionBuildFile>
    <AssemblyNuGetVersion></AssemblyNuGetVersion>
  </PropertyGroup>

  <Target Name="After_UpdateAssemblyInfosForDevelopment" AfterTargets="UpdateAssemblyInfosLocalBuild" DependsOnTargets="PrepareAssemblyNuGetVersion">
    <Error Text="The property 'AssemblyNuGetVersion' is not set." Condition="'$(AssemblyNuGetVersion)' == ''" />

    <ItemGroup>
      <MyNamespaces Include="msb">
        <Prefix>msb</Prefix>
        <Uri>http://schemas.microsoft.com/developer/msbuild/2003</Uri>
      </MyNamespaces>
    </ItemGroup>

    <MSBuild.ExtensionPack.Xml.XmlFile
            Namespaces="@(MyNamespaces)"
            TaskAction="ReadElementText"
            File="$(RemotionBuildFile)"
            XPath="/msb:Project/msb:PropertyGroup/msb:RemotionBuildScriptPath" >
      <Output TaskParameter="Value" PropertyName="OldRemotionBuildScriptPathValue" />
    </MSBuild.ExtensionPack.Xml.XmlFile>

    <PropertyGroup>
      <!-- Regex to match the Version number, which is between "Remotion.BuildScript and the first "\"
        (?<=Remotion\.BuildScript\.) === positive lookbehind for "Remotion.BuildScript"
        (.*?)                        === Match anything
        (?=\\)                       === positive lookahead for first "\"
      -->
      <RegexForOldVersion>(?&lt;=Remotion\.BuildScript\.)(.*?)(?=\\)</RegexForOldVersion>

      <!-- Regex to match the second "-" (as we have to transform the VersionNumber from "2.0.0-alpha-015" to "2.0.0-alpha015")
        (?<=\-.*)  === positive lookbehind for "-" followed by anything
        (\-)       === Match second "-"
      -->
      <RegexForRemovingSecondDash>(?&lt;=\-.*)\-</RegexForRemovingSecondDash>

      <OldVersion>$([System.Text.RegularExpressions.Regex]::Match($(OldRemotionBuildScriptPathValue), $(RegexForOldVersion)))</OldVersion>
      <VersionWithOldStylePrereleaseTag>$([System.Text.RegularExpressions.Regex]::Replace ($(AssemblyNuGetVersion), $(RegexForRemovingSecondDash), ""))</VersionWithOldStylePrereleaseTag>
      <NewRemotionBuildScriptPathValue>$( OldRemotionBuildScriptPathValue.Replace( $(OldVersion), $(VersionWithOldStylePrereleaseTag) ) )</NewRemotionBuildScriptPathValue>
    </PropertyGroup>

    <ReplaceFileText
        InputFilename="$(RemotionBuildFile)"
        OutputFilename="$(RemotionBuildFile)"
        MatchExpression="$(OldRemotionBuildScriptPathValue)"
        ReplacementText="$(NewRemotionBuildScriptPathValue)" />
  </Target>

  <UsingTask TaskName="ReplaceFileText" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <MatchExpression ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            File.WriteAllText(
                OutputFilename,
                File.ReadAllText(InputFilename).Replace(@MatchExpression, @ReplacementText)
                );
          ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>