<?xml version="1.0" encoding="UTF-8" ?>

<!-- Copyright (c) rubicon IT GmbH, www.rubicon.eu
 !
 ! See the NOTICE file distributed with this work for additional information
 ! regarding copyright ownership.  rubicon licenses this file to you under 
 ! the Apache License, Version 2.0 (the "License"); you may not use this 
 ! file except in compliance with the License.  You may obtain a copy of the 
 ! License at
 !
 !   http://www.apache.org/licenses/LICENSE-2.0
 !
 ! Unless required by applicable law or agreed to in writing, software 
 ! distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 ! WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the 
 ! License for the specific language governing permissions and limitations
 ! under the License.
-->

<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="MSBuild.ExtensionPack.Framework.MsBuildHelper"/>
  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="MSBuild.ExtensionPack.Framework.TextString"/>
  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="MSBuild.ExtensionPack.Science.Maths"/>
  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="MSBuild.ExtensionPack.Xml.XmlFile"/>
  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="Remotion.BuildScript.BuildTasks.CreateTestConfigurations"/>

  <!-- Constants -->
  <PropertyGroup>
    <DefaultTestExecutionRuntime>net-4.5</DefaultTestExecutionRuntime>
    <NoDB>NoDB</NoDB>
    <NoBrowser>NoBrowser</NoBrowser>
  </PropertyGroup>

  <ItemGroup>
    <NumberOfTestFailuresPerProject Include="0"/>
  </ItemGroup>

  <!-- Main target; reporting only, calls RunTestsInternal for actual work -->
  <Target Name="RunTests" DependsOnTargets="CreateTestConfigurations;CreateLogDirectory;BuildTestProjects;LogRunTestsStartTime;RunTestsInternal">
    <Error Text="The property 'ConfigurationID' is not set." Condition="'$(ConfigurationID)' == ''" />
    <Error Text="ItemGroup 'NumberOfTestFailuresPerProject' is empty, but should contain test results!" Condition="@(NumberOfTestFailuresPerProject) == ''"/>
    <MSBuild.ExtensionPack.Science.Maths TaskAction="Add" Numbers="@(NumberOfTestFailuresPerProject)">
      <Output PropertyName="_failures" TaskParameter="Result"/>
    </MSBuild.ExtensionPack.Science.Maths>

    <Error
      Text="Running Unit-Tests failed because of $(_failures) failures in: %0A@(FailedProjects->'%(Identity) (%(Platform)/%(DatabaseSystem)) with %(Failures) failures','%0A')"
      Condition="$(_failures) &gt; 0"/>

    <Error
      Text="One or more test runs resulted in a failure, but the tests themselves have passed. This most likely means that a Setup, Teardown, OneTimeSetup or OneTimeTeardown method threw and exception. Check the log for more information. Failed test assemblies: %0A@(FailedProjects->'%(Identity)','%0A')"
      Condition="$(_failures) == 0 and '$(_nunitIsSuccess)' == 'False'"/>

    <PropertyGroup>
      <_timeTaken>$([System.DateTime]::UtcNow.Subtract($([System.DateTime]::Parse($(RunTestsStartTime)))).TotalMilliseconds.ToString(0))</_timeTaken>
    </PropertyGroup>

    <Message Text="##teamcity[buildStatisticValue key='Duration.RunTests.$(ConfigurationID)' value='$(_timeTaken)']"
             Condition="'$(TEAMCITY_VERSION)' != ''" />

    <Message Text="Done running tests, ConfigurationID=$(ConfigurationID)" Importance="High"/>
  </Target>

  <Target Name="LogRunTestsStartTime">
    <PropertyGroup>
      <RunTestsStartTime>$([System.DateTime]::UtcNow)</RunTestsStartTime>
    </PropertyGroup>
  </Target>


  <Target Name="RunTestsInternal"
          DependsOnTargets="AddAdditionalMetadataToOutputFiles;CreateTestConfigurations;PrepareNunitDirectory"
          Inputs="%(_testOutputFiles.Identity)"
          Outputs="%(_testOutputFiles.Identity)">
    <Message Text="Running tests %(_testOutputFiles.Identity)" Importance="High"/>

    <Error Text="The property 'RemotionBuildScriptTasksPath' is not set." Condition="'$(RemotionBuildScriptTasksPath)' == ''"/>
    <Error Text="The property 'LogDirectory' is not set." Condition="'$(LogDirectory)' == ''"/>
    <Error Text="The property 'NoDB' is not set." Condition="'$(NoDB)' == ''"/>
    <Error Text="The property 'NoBrowser' is not set." Condition="'$(NoBrowser)' == ''"/>
    <Error Text="The property 'NUnitToolPath' is not set." Condition="'$(NUnitToolPath)' == ''"/>

    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="GetItemCount" InputItems1="@(_testOutputFiles)">
      <Output TaskParameter="ItemCount" PropertyName="_testOutputFilesCount"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>

    <PropertyGroup>
      <_testAssemblyFileName>%(_testOutputFiles.TestAssemblyFileName)</_testAssemblyFileName>
      <_testAssemblyFullPath>%(_testOutputFiles.TestAssemblyFullPath)</_testAssemblyFullPath>
      <_testAssemblyDirectory>%(_testOutputFiles.TestAssemblyDirectoryName)</_testAssemblyDirectory>
      <_use32Bit>%(_testOutputFiles.Use32Bit)</_use32Bit>
      <_dockerImageName>%(_testOutputFiles.DockerImage)</_dockerImageName>
      <_dockerIsolationMode>%(_testOutputFiles.DockerIsolationMode)</_dockerIsolationMode>
      <_executionRuntimeKey>%(_testOutputFiles.ExecutionRuntimeKey)</_executionRuntimeKey>
      <_targetRuntime>%(_testOutputFiles.TargetRuntime)</_targetRuntime>
      <_platform>%(_testOutputFiles.Platform)</_platform>
      <_databaseSystem>%(_testOutputFiles.DatabaseSystem)</_databaseSystem>
      <_browser>%(_testOutputFiles.Browser)</_browser>
      <_appConfigFile>%(_testOutputFiles.TestAssemblyFullPath).config</_appConfigFile>
      <_testingSetupBuildFile>%(_testOutputFiles.TestingSetupBuildFile)</_testingSetupBuildFile>
      <_dockerEnabled>%(_testOutputFiles.UseDocker)</_dockerEnabled>
      <_excludeCategoriesInTestConfiguration>%(_testOutputFiles.ExcludeCategories)</_excludeCategoriesInTestConfiguration>
      <_includeCategoriesInTestConfiguration>%(_testOutputFiles.IncludeCategories)</_includeCategoriesInTestConfiguration>
    </PropertyGroup>

    <!-- Update configuration for tests -->

    <MSBuild Projects="$(_testingSetupBuildFile)"
             BuildInParallel="false"
             Properties="
                RemotionBuildScriptTasksPath=$(RemotionBuildScriptTasksPath);
                LogDirectory=$(LogDirectory);
                Platform=$(_platform);
                AppConfigFile=$(_appConfigFile);
                DatabaseSystem=$(_databaseSystem);
                Browser=$(_browser);
                DockerImage=$(_dockerImageName);
                DockerIsolationMode=$(_dockerIsolationMode);"
             Condition="'$(_testingSetupBuildFile)' != ''"/>

    <!-- Run tests -->

    <PropertyGroup>
      <_mergedTestCategoriesToExclude>$(TestCategoriesToExclude.Replace(';', ',')),$(_excludeCategoriesInTestConfiguration)</_mergedTestCategoriesToExclude>
      <_mergedTestCategoriesToExclude>$(_mergedTestCategoriesToExclude.Trim(','))</_mergedTestCategoriesToExclude>

      <_mergedTestCategoriesToInclude>$(TestCategoriesToInclude.Replace(';', ',')),$(_includeCategoriesInTestConfiguration)</_mergedTestCategoriesToInclude>
      <_mergedTestCategoriesToInclude>$(_mergedTestCategoriesToInclude.Trim(','))</_mergedTestCategoriesToInclude>
    </PropertyGroup>

    <ItemGroup>
      <_splitCategoriesToExclude Remove="@(_splitCategoriesToExclude)"/>
      <_splitCategoriesToExclude Include="$(_mergedTestCategoriesToExclude.Split(','))"/>

      <_splitCategoriesToInclude Remove="@(_splitCategoriesToInclude)"/>
      <_splitCategoriesToInclude Include="$(_mergedTestCategoriesToInclude.Split(','))"/>

      <_exludeFilters Remove="@(_exludeFilters)"/>
      <_exludeFilters Include="cat == %(_splitCategoriesToExclude.Identity) "/>

      <_inludeFilters Remove="@(_inludeFilters)"/>
      <_inludeFilters Include="cat == %(_splitCategoriesToInclude.Identity) "/>
    </ItemGroup>

    <PropertyGroup>
      <_excludeCategoriesCallArgumentString>@(_exludeFilters)</_excludeCategoriesCallArgumentString>
      <_excludeCategoriesCallArgumentString>$(_excludeCategoriesCallArgumentString.Replace(";", " || "))</_excludeCategoriesCallArgumentString>
      <_excludeCategoriesCallArgumentString>!($(_excludeCategoriesCallArgumentString))</_excludeCategoriesCallArgumentString>

      <_includeCategoriesCallArgumentString>@(_inludeFilters)</_includeCategoriesCallArgumentString>
      <_includeCategoriesCallArgumentString>$(_includeCategoriesCallArgumentString.Replace(";", " &amp;&amp; "))</_includeCategoriesCallArgumentString>
    </PropertyGroup>

    <!--  Output example: where "!(cat == ExcludeMe1 || cat == ExcludeMe2) && cat == IncludeMe"  -->
    <PropertyGroup>
      <_nunitTestFilter></_nunitTestFilter>
      <_nunitTestFilter Condition="$(_mergedTestCategoriesToExclude)!='' And $(_mergedTestCategoriesToInclude)!=''">$(_excludeCategoriesCallArgumentString) &amp;&amp; $(_includeCategoriesCallArgumentString)</_nunitTestFilter>
      <_nunitTestFilter Condition="$(_mergedTestCategoriesToExclude)!='' And $(_mergedTestCategoriesToInclude)==''">$(_excludeCategoriesCallArgumentString)</_nunitTestFilter>
      <_nunitTestFilter Condition="$(_mergedTestCategoriesToExclude)=='' And $(_mergedTestCategoriesToInclude)!=''">$(_includeCategoriesCallArgumentString)</_nunitTestFilter>
      <_nunitTestFilter Condition="$(_nunitTestFilter)!=''">--where "$(_nunitTestFilter)"</_nunitTestFilter>
    </PropertyGroup>

    <PropertyGroup>
      <_testName>$(_testAssemblyFileName).$(ConfigurationID).$(_platform).$(_executionRuntimeKey).$(_targetRuntime)</_testName>
      <_testName Condition="'$(_databaseSystem)' != $(NoDB)">$(_testName).$(_databaseSystem)</_testName>
      <_testName Condition="'$(_browser)' != $(NoBrowser)">$(_testName).$(_browser)</_testName>
      <_testName Condition="'$(_mergedTestCategoriesToExclude)' !=''">$(_testName).Exclude=$(_mergedTestCategoriesToExclude.Replace(',', '-'))</_testName>
      <_testName Condition="'$(_mergedTestCategoriesToInclude)' !=''">$(_testName).Include=$(_mergedTestCategoriesToInclude.Replace(',', '-'))</_testName>
      <_testResultFile>$(LogDirectory)$(_testName).xml</_testResultFile>
    </PropertyGroup>

    <PropertyGroup>
      <_nunitRunnerFileName>nunit3-console.exe</_nunitRunnerFileName>
      <_use32BitArgument Condition="$(_use32Bit) == 'True'">--x86</_use32BitArgument>
      <_nunitCallArgumentString> ^
        $(_use32BitArgument) ^
        $(_testAssemblyFullPath) ^
        $(_nunitTestFilter) ^
        --framework=$(_targetRuntime) ^
        --result=$(_testResultFile) ^
        --list-extensions
      </_nunitCallArgumentString>
    </PropertyGroup>

    <PropertyGroup>
      <_runTestsInDockerProperties>
        NunitRunnerFileName=$(_nunitRunnerFileName);
        NunitCallArgumentString=$(_nunitCallArgumentString);
        TestAssemblyDirectory=$(_testAssemblyDirectory);
      </_runTestsInDockerProperties>
    </PropertyGroup>

    <!--If DockerDisabled, call Nunit Runner directly-->
    <Exec
        Command="$(_nunitRunnerFolderPath)$(_nunitRunnerFileName) $(_nunitCallArgumentString)"
        IgnoreExitCode="true"
        Condition="$(_dockerEnabled) == 'False'"/>

    <!--Else, call RunTestsInDocker target-->
    <PropertyGroup>
      <_dockerCommand>
docker run ^
--rm ^
--isolation $(_dockerIsolationMode) ^
--volume $(_nunitRunnerFolderPath):$(_nunitRunnerFolderPath) ^
--volume $(_testAssemblyDirectory):$(_testAssemblyDirectory) ^
--volume $(LogDirectory):$(LogDirectory) ^
--entrypoint $(_nunitRunnerFolderPath)$(_nunitRunnerFileName) ^
$(_dockerImageName) $(_nunitCallArgumentString)
      </_dockerCommand>
    </PropertyGroup>

    <!--This can be replaced with the "pull" flag on "docker run" as soon as Docker versions are updated to Docker version 19.09-->
    <Exec
        Command="docker pull $(_dockerImageName)"
        IgnoreExitCode="true"
        Condition="$(_dockerEnabled) == 'True'"/>

    <Exec
        Command="$(_dockerCommand)"
        IgnoreExitCode="true"
        Condition="$(_dockerEnabled) == 'True'"/>

    <Message Text="##teamcity[importData type='nunit' path='$(_testResultFile)' verbose='true' whenNoDataPublished='error']"
             Condition="'$(TEAMCITY_VERSION)' != ''" />

    <MSBuild.ExtensionPack.Xml.XmlFile
        TaskAction="ReadAttribute"
        File="$(_testResultFile)"
        XPath="/test-run/test-suite/@duration">
      <Output TaskParameter="Value" PropertyName="_testTime" />
    </MSBuild.ExtensionPack.Xml.XmlFile>

    <PropertyGroup>
      <_testTime Condition="'$(_testTime)' == ''">0</_testTime>
    </PropertyGroup>

    <MSBuild.ExtensionPack.Xml.XmlFile
        TaskAction="ReadAttribute"
        File="$(_testResultFile)"
        XPath="/test-run/@failed">
      <Output TaskParameter="Value" PropertyName="_nunit_failures" />
    </MSBuild.ExtensionPack.Xml.XmlFile>

    <MSBuild.ExtensionPack.Xml.XmlFile
        TaskAction="ReadAttribute"
        File="$(_testResultFile)"
        XPath="/test-run/@result">
      <Output TaskParameter="Value" PropertyName="_nunitResult" />
    </MSBuild.ExtensionPack.Xml.XmlFile>

    <MSBuild.ExtensionPack.Xml.XmlFile
        TaskAction="ReadAttribute"
        File="$(_testResultFile)"
        XPath="/test-run/@testcasecount">
      <Output TaskParameter="Value" PropertyName="_nunitTestCaseCount" />
    </MSBuild.ExtensionPack.Xml.XmlFile>

    <!--  NUnit2 tests display the assembly path in both the name and fullname attribute  -->
    <!--  An issue has been created here: https://github.com/nunit/nunit-v2-framework-driver/issues/39 -->
    <!--  Once the issue is resolved, this can be removed  -->
    <MSBuild.ExtensionPack.Xml.XmlFile
        TaskAction="UpdateElement"
        File="$(_testResultFile)"
        XPath="/test-run/test-suite/@name"
        InnerText="$(_testAssemblyFileName)">
    </MSBuild.ExtensionPack.Xml.XmlFile>

    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Replace" OldString="$(_testTime)" OldValue="." NewValue="">
      <Output TaskParameter="NewString" PropertyName="_testTime" />
    </MSBuild.ExtensionPack.Framework.TextString>

    <Message Text="##teamcity[buildStatisticValue key='$(_testName)' value='$(_testTime)']"
             Condition="'$(TEAMCITY_VERSION)' != ''"/>

    <ItemGroup Condition="'$(_nunitResult)' == 'Failed'">
      <NumberOfTestFailuresPerProject Include="$(_nunit_failures)"/>
      <FailedProjects Include="$(_testAssemblyFullPath)">
        <Platform>$(_platform)</Platform>
        <DatabaseSystem>$(_databaseSystem)</DatabaseSystem>
        <Browser>$(_browser)</Browser>
        <Failures>$(_nunit_failures)</Failures>
      </FailedProjects>
    </ItemGroup>

    <PropertyGroup>
      <_nunitIsSuccess Condition="'$(_nunitResult)' == 'Failed'">False</_nunitIsSuccess>

      <!-- NUnit counts a test run as failed if no tests or testfixtures could be found. -->
      <!-- For our needs, we would like to prevent such case from causing the build to fail -->
      <_nunitIsSuccess Condition="'$(_nunitTestCaseCount)' == '0'">True</_nunitIsSuccess>
    </PropertyGroup>
  </Target>

  <Target Name="PrepareNunitDirectory" Outputs="$(_nunitRunnerFolderPath)">
    <Error Text="The property 'TempDirectory' is not set." Condition="'$(TempDirectory)' == ''" />
    <Error Text="The property 'NUnitToolPath' is not set." Condition="'$(NUnitToolPath)' == ''" />

    <PropertyGroup>
      <_nunitRunnerFolderPath>$(TempDirectory)SharedSourceBuildNunitCopy\</_nunitRunnerFolderPath>
    </PropertyGroup>

    <WriteLinesToFile
        File="$(NUnitToolPath)Remotion.NUnit.addins"
        Lines="*.dll"
        Overwrite="true"
        Encoding="Unicode"/>

    <ItemGroup>
      <_filesToBeCopied Include="$(NUnitToolPath)**\*.*" />
      <_filesToBeCopied Include="%(NUnitExtensionsPaths.Identity)**\*.*" />
    </ItemGroup>

    <Copy SourceFiles="@(_filesToBeCopied)" DestinationFolder="$(_nunitRunnerFolderPath)" />
  </Target>

  <Target Name="CreateTestConfigurations">
    <ItemGroup>
      <EnabledBrowsers Include="$(Browsers.Split('+'))"/>
      <EnabledExecutionRuntimes Include="$(ExecutionRuntimes.Split('+'))"/>
      <EnabledPlatforms Include="$(Platforms.Split('+'))"/>
      <EnabledDatabaseSystems Include="$(DatabaseSystems.Split('+'))"/>
      <EnabledTargetRuntimes Include="$(TargetRuntimes.Split('+'))"/>
      <EnabledConfigurationIDs Include="$(ConfigurationID)"/>
    </ItemGroup>

    <Remotion.BuildScript.BuildTasks.CreateTestConfigurations
        Input="@(TestOutputFiles)"

        EnabledPlatforms="@(EnabledPlatforms)"
        SupportedPlatforms="@(SupportedPlatforms)"

        EnabledDatabaseSystems="@(EnabledDatabaseSystems)"
        SupportedDatabaseSystems="@(SupportedDatabaseSystems)"

        EnabledBrowsers="@(EnabledBrowsers)"
        SupportedBrowsers="@(SupportedBrowsers)"

        EnabledExecutionRuntimes="@(EnabledExecutionRuntimes)"
        SupportedExecutionRuntimes="@(SupportedExecutionRuntimes)"

        EnabledTargetRuntimes="@(EnabledTargetRuntimes)"
        SupportedTargetRuntimes="@(SupportedTargetRuntimes)"

        EnabledConfigurationIDs="@(EnabledConfigurationIDs)">

      <Output TaskParameter="Output" ItemName="_testOutputFiles"/>
    </Remotion.BuildScript.BuildTasks.CreateTestConfigurations>
  </Target>
</Project>