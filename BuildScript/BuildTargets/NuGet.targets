<?xml version="1.0" encoding="UTF-8" ?>

<!-- Copyright (c) rubicon IT GmbH, www.rubicon.eu
 !
 ! See the NOTICE file distributed with this work for additional information
 ! regarding copyright ownership.  rubicon licenses this file to you under 
 ! the Apache License, Version 2.0 (the "License"); you may not use this 
 ! file except in compliance with the License.  You may obtain a copy of the 
 ! License at
 !
 !   http://www.apache.org/licenses/LICENSE-2.0
 !
 ! Unless required by applicable law or agreed to in writing, software 
 ! distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 ! WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the 
 ! License for the specific language governing permissions and limitations
 ! under the License.
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="MSBuild.ExtensionPack.Compression.Zip"/>
  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="MSBuild.ExtensionPack.FileSystem.File"/>
  <UsingTask AssemblyFile="$(RemotionBuildScriptTasksPath)Remotion.BuildScript.dll" TaskName="MSBuild.ExtensionPack.Xml.XmlFile"/>

  <PropertyGroup>
    <NuGetWithDebugSymbolsOutputDirectory>$(OutputDirectory)NuGetWithDebugSymbols\</NuGetWithDebugSymbolsOutputDirectory>
    <NuGetWithSymbolServerSupportDirectory>$(OutputDirectory)NuGetWithSymbolServerSupport\</NuGetWithSymbolServerSupportDirectory>
  </PropertyGroup>

  <Target Name="CreateNuGetPackagesWithDebugSymbols" DependsOnTargets="CreateNuGetPackagesWithDebugSymbolsForDefaultProjects;CreateNuGetPackagesWithDebugSymbolsForNuSpecBasedProjects" />
  <Target Name="CreateNuGetPackagesWithSymbolServerSupport" DependsOnTargets="CreateNuGetPackagesWithSymbolServerSupportForDefaultProjects" />

  <Target Name="CreateNuGetPackagesWithDebugSymbolsForDefaultProjects" DependsOnTargets="AddNuGetMetadataToNuGetOutputFiles">
    <Message Text="Creating NuGet packages with debug-symbols, ConfigurationID=$(ConfigurationID)" Importance="High"/>

    <MakeDir Directories="$(NuGetWithDebugSymbolsOutputDirectory)$(ConfigurationID)%(NuGetOutputFiles.FolderSuffix)" />

    <PropertyGroup>
      <_nuGetTempDirectory>$(TempDirectory)nuget\$([System.Guid]::NewGuid())\</_nuGetTempDirectory>
    </PropertyGroup>

    <!-- Add FolderSuffix, add Unittest and IntegrationTest projects-->
    <MSBuild Projects="@(ReleaseProjectFiles)"
        Targets="Pack"
        ContinueOnError="false"
        Properties="%(NuGetOutputFiles.AdditionalProperties);PackageOutputPath=$(_nuGetTempDirectory)$(ConfigurationID)"
        ToolsVersion="%(ReleaseProjectFiles.MSBuildToolsVersion)">
    </MSBuild>

    <ItemGroup>
      <_nuGetFiles Remove="@(_nuGetFiles)" />
      <_nuGetFiles Include="$(_nuGetTempDirectory)**\*.*" />
    </ItemGroup>

    <Copy SourceFiles="@(_nuGetFiles)" DestinationFolder="$(NuGetWithDebugSymbolsOutputDirectory)%(RecursiveDir)" />

    <Message Text="Done creating NuGet packages with debug-symbols, ConfigurationID=$(ConfigurationID)" Importance="High"/>
  </Target>

  <Target Name="CreateNuGetPackagesWithSymbolServerSupportForDefaultProjects" DependsOnTargets="AddNuGetMetadataToNuGetOutputFiles">
    <Message Text="Creating NuGet packages with symbol-server support, ConfigurationID=$(ConfigurationID)" Importance="High"/>

    <MakeDir Directories="$(NuGetWithSymbolServerSupportDirectory)$(ConfigurationID)%(NuGetOutputFiles.FolderSuffix)" />

    <PropertyGroup>
      <_nuGetTempDirectory>$(TempDirectory)nuget\$([System.Guid]::NewGuid())\</_nuGetTempDirectory>
    </PropertyGroup>

    <MSBuild Projects="@(ReleaseProjectFiles)"
        Targets="Pack"
        ContinueOnError="false"
        Properties="%(NuGetOutputFiles.AdditionalProperties);PackageOutputPath=$(_nuGetTempDirectory)$(ConfigurationID)%(NuGetOutputFiles.FolderSuffix);IncludeSymbols=true;SymbolPackageFormat=snupkg"
        ToolsVersion="%(NuGetOutputFiles.MSBuildToolsVersion)">
    </MSBuild>
    
    <ItemGroup>
      <_nuGetFiles Remove="@(_nuGetFiles)" />
      <_nuGetFiles Include="$(_nuGetTempDirectory)**\*.*" />
    </ItemGroup>

    <Copy SourceFiles="@(_nuGetFiles)" DestinationFolder="$(NuGetWithSymbolServerSupportDirectory)%(RecursiveDir)" />

    <Message Text="Done creating NuGet packages with symbol-server support, ConfigurationID=$(ConfigurationID)" Importance="High"/>
  </Target>

  <Target Name="CreateNuGetPackagesWithDebugSymbolsForNuSpecBasedProjects" 
          DependsOnTargets="ResolveNuGetPath;PrepareAssemblyNuGetVersion;UpdateNuSpecFiles;CreateLocalNuSpecFiles">
    <Message Text="Creating NuGet packages with debug-symbols, ConfigurationID=$(ConfigurationID)" Importance="High"/>

    <Error Text="The property 'ConfigurationID' is not set." Condition="'$(ConfigurationID)' == ''" />

    <PropertyGroup>
      <_nuGetTempDirectory>$(TempDirectory)nuget\$([System.Guid]::NewGuid())\</_nuGetTempDirectory>
    </PropertyGroup>

    <MakeDir Directories="$(_nuGetTempDirectory)$(ConfigurationID)%(NuGetOutputFiles.FolderSuffix)" Condition="'%(NuGetOutputFiles.NuSpecFiles)' != ''" />
    <MakeDir Directories="$(NuGetWithDebugSymbolsOutputDirectory)$(ConfigurationID)%(NuGetOutputFiles.FolderSuffix)" />

    <NuGet.MSBuild.Tools.Pack
        ToolPath="$(NuGetToolPath)"
        Project="%(NuGetOutputFiles.MSBuildSourceProjectFile)"
        BasePath="%(NuGetOutputFiles.ProjectDirectory)"
        OutputDirectory="$(_nuGetTempDirectory)$(ConfigurationID)%(NuGetOutputFiles.FolderSuffix)"
        IncludeReferencedProjects="True"
        Symbols="False"
        Configuration="$(ConfigurationID)"
        Properties="
            ExtraTags=$(ConfigurationID)Build %(NuGetOutputFiles.DocumentationTag);
            DocumentationFile=%(NuGetOutputFiles.DocumentationFile);
            NuSpecFolder=%(NuGetOutputFiles.NuSpecFolder);"
        Condition="'%(NuGetOutputFiles.NuSpecFiles)' != ''" />

    <!-- Extract the NUPKG-files, remove the SRC-files, re-zip the NUPKG-files -->

    <ItemGroup>
      <_nuGetFiles Remove="@(_nuGetFiles)" />
      <_nuGetFiles Include="$(_nuGetTempDirectory)**\*.nupkg" />
      <_nuGetFiles>
        <ExtractionPath>$(TempDirectory)nuget\$([System.Guid]::NewGuid())\</ExtractionPath>
        <ArchivePath>$(NuGetWithDebugSymbolsOutputDirectory)%(RecursiveDir)\%(Filename)%(Extension)</ArchivePath>
      </_nuGetFiles>
    </ItemGroup>

    <MSBuild.ExtensionPack.Compression.Zip
        TaskAction="Extract"
        ExtractPath="%(_nuGetFiles.ExtractionPath)" 
        ZipFileName="%(_nuGetFiles.Identity)" 
        Condition="@(_nuGetFiles) != ''" />

    <RemoveDir Directories="%(_nuGetFiles.ExtractionPath)src" />

    <MSBuild.ExtensionPack.Compression.Zip
        TaskAction="Create"
        CompressPath="%(_nuGetFiles.ExtractionPath)"
        RemoveRoot="%(_nuGetFiles.ExtractionPath)"
        ZipFileName="%(_nuGetFiles.ArchivePath)"
        Condition="@(_nuGetFiles) != ''" />

    <Message Text="Done creating NuGet packages with debug-symbols, ConfigurationID=$(ConfigurationID)" Importance="High"/>
  </Target>

  <Target Name="UpdateNuSpecFiles" DependsOnTargets="AddNuGetMetadataToNuGetOutputFiles;PrepareAssemblyNuGetVersion">
    <Message Text="Updating NuGet nuspec-files, ConfigurationID=$(ConfigurationID)" Importance="High"/>

    <ItemGroup>
      <_nuSpecFiles Remove="@(_nuSpecFiles)" />
      <_nuSpecFiles Include="%(NuGetOutputFiles.NuSpecFiles)" />
      <_nuSpecFiles>
        <Backup>%(Identity).$(BackupExtension)</Backup>
      </_nuSpecFiles>
    </ItemGroup>

    <!-- Remove empty nuspec files from list -->
    <ItemGroup>
      <_placeHolderNuSpecFiles Remove="@(_placeHolderNuSpecFiles)" />
    </ItemGroup>
    <MSBuild.ExtensionPack.FileSystem.File TaskAction="FilterByContent" RegexPattern="^$" Files="@(_nuSpecFiles)" Condition="'@(_nuSpecFiles)' != ''">
      <Output TaskParameter="IncludedFiles" ItemName="_placeHolderNuSpecFiles"/>
    </MSBuild.ExtensionPack.FileSystem.File>
    <ItemGroup>
      <_nuSpecFiles Remove="@(_placeHolderNuSpecFiles)" />
    </ItemGroup>

    <Message Text="Found nuspec-file to update: '%(_nuSpecFiles.Identity)'"/>

    <ItemGroup>
      <ModifiedFiles Include="%(_nuSpecFiles.Identity)">
        <Backup>%(Backup)</Backup>
      </ModifiedFiles>
    </ItemGroup>

    <Copy SourceFiles="%(_nuSpecFiles.Identity)"
          DestinationFiles="%(_nuSpecFiles.Backup)" />

    <MSBuild.ExtensionPack.Xml.XmlFile 
        TaskAction="UpdateElement"
        File="%(_nuSpecFiles.Identity)"
        XPath="package/metadata/version"
        InnerText="$(AssemblyNuGetVersion)"
        Condition="'@(_nuSpecFiles)' != ''" />

    <Message Text="Done updating NuGet nuspec-files, ConfigurationID=$(ConfigurationID)" Importance="High"/>
  </Target>

  <Target Name="CreateLocalNuSpecFiles" DependsOnTargets="UpdateNuSpecFiles">
    <Message Text="Creating local NuGet nuspec-files, ConfigurationID=$(ConfigurationID)" Importance="High"/>

    <ItemGroup>
      <_outputFiles Remove="@(_outputFiles)" />
      <_outputFiles Include="@(NuGetOutputFiles)"
                    Condition="'%(NuGetOutputFiles.NuSpecFiles)' != '' AND !Exists (%(NuGetOutputFiles.ConventionBasedNuSpecFile))" />
    </ItemGroup>

    <Message Text="Found project without local nuspec-file: '%(_outputFiles.Identity)'" Condition="'@(_outputFiles)' != ''"/>

    <ItemGroup>
      <_localNuSpecFilesToCreate Remove="@(_localNuSpecFilesToCreate)" />
      <_localNuSpecFilesToCreate Include="%(_outputFiles.ConventionBasedNuSpecFile)" />
    </ItemGroup>

    <ItemGroup>
      <CreatedFiles Include="@(_localNuSpecFilesToCreate)" />
    </ItemGroup>

    <Touch Files="@(_localNuSpecFilesToCreate)" AlwaysCreate="true" />

    <Message Text="Done creating local NuGet nuspec-files, ConfigurationID=$(ConfigurationID)" Importance="High"/>
  </Target>

  <Target Name="CreateNuGetOutputFiles" DependsOnTargets="AddAdditionalMetadataToOutputFiles">

    <CreateItem Include="@(ReleaseOutputFiles)" AdditionalMetadata="Type=Release;FolderSuffix=">
      <Output ItemName="NuGetOutputFiles" TaskParameter="Include"/>
    </CreateItem>

    <CreateItem Include="@(TestOutputFiles)" AdditionalMetadata="Type=Test;FolderSuffix=-Test">
      <Output ItemName="NuGetOutputFiles" TaskParameter="Include"/>
    </CreateItem>

  </Target>

  <Target Name="AddNuGetMetadataToNuGetOutputFiles" 
          DependsOnTargets="CreateNuGetOutputFiles;CreateDocumentationProperties" 
          Outputs="%(NuGetOutputFiles.MSBuildSourceProjectFile)">

    <Error Text="The property 'DocumentationBaseDirectory' is not set." Condition="'$(DocumentationBaseDirectory)' == ''" />

    <PropertyGroup>
      <_msBuildSourceProjectFile>%(NuGetOutputFiles.MSBuildSourceProjectFile)</_msBuildSourceProjectFile>
      <_conventionBasedNuSpecFile>$([System.IO.Path]::ChangeExtension( $(_msBuildSourceProjectFile), "nuspec" ))</_conventionBasedNuSpecFile>
      <_documentationFile>$(DocumentationCompilationOutputDirectory)%(NuGetOutputFiles.AssemblyName).chm</_documentationFile>
    </PropertyGroup>

    <ItemGroup>
      <_allNuspeCandidates Remove="@(_allNuspeCandidates)" />
    </ItemGroup>
    <XmlPeek Namespaces="&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;"
             XmlInputPath="$(_msBuildSourceProjectFile)"
             Query="/msb:Project/msb:ItemGroup/*[local-name()!='Compile' and local-name()!='Content' and local-name()!='EmbeddedResource' and local-name()!='Reference' and local-name()!='ProjectReference']/@Include">
      <Output TaskParameter="Result" ItemName="_allNuspeCandidates" />
    </XmlPeek>

    <ItemGroup>
      <_allNuSpecFiles Remove="@(_allNuSpecFiles)" />
      <_allNuSpecFiles Include="$(_conventionBasedNuSpecFile)" />
      <_allNuSpecFiles Include="$([System.IO.Path]::GetFullPath( $([System.IO.Path]::Combine( $([System.IO.Path]::GetDirectoryName( $(_msBuildSourceProjectFile) )), %(_allNuspeCandidates.Identity) )) ))"
                       Condition="$([System.String]::new('%(_allNuspeCandidates.Identity)').EndsWith('.nuspec'))" />
    </ItemGroup>

    <ItemGroup>
      <_existingNuSpecFiles Remove="@(_existingNuSpecFiles)" />
      <_existingNuSpecFiles Include="@(_allNuSpecFiles)" Condition="Exists (%(Identity))" />
    </ItemGroup>

    <ItemGroup>
      <_existingNuSpecFolders Remove="@(_existingNuSpecFolders)" />
      <_existingNuSpecFolders Include="$([System.IO.Path]::GetDirectoryName( %(_allNuSpecFiles.Identity) ))" />
      <_existingNuSpecFolders Remove="$([System.IO.Path]::GetDirectoryName( $(_msBuildSourceProjectFile) ))" />
    </ItemGroup>
    <Error Text="NuSpec files located in more than one directory have been found." Condition="'@(_existingNuSpecFolders->Count())' &gt; 1" />
    <PropertyGroup>
      <_existingNuSpecFolder>@(_existingNuSpecFolders)</_existingNuSpecFolder>
    </PropertyGroup>

    <ItemGroup>
      <NuGetOutputFiles>
        <NuSpecFiles>@(_existingNuSpecFiles)</NuSpecFiles>
        <ConventionBasedNuSpecFile>$(_conventionBasedNuSpecFile)</ConventionBasedNuSpecFile>
        <NuSpecFolder>$(_existingNuSpecFolder)\</NuSpecFolder>
        <DocumentationFile Condition="Exists ($(_documentationFile))">$(_documentationFile)</DocumentationFile>
        <DocumentationTag Condition="Exists ($(_documentationFile))">Documentation</DocumentationTag>
      </NuGetOutputFiles>
    </ItemGroup>

  </Target>

  <Target Name="ResolveNuGetPath" Condition=" '$(NuGetToolPath)' == '' OR !Exists('$(NuGetToolPath)') ">
    <NuGet.MSBuild.Tools.ResolveNuGetToolPath Solution="$(SolutionDirectory)" ContinueOnError="true">
      <Output TaskParameter="ToolPath" PropertyName="NuGetToolPath"/>
    </NuGet.MSBuild.Tools.ResolveNuGetToolPath>

    <Error Text="The NuGet.exe path could not be resolved, or does not exist." Condition=" '$(NuGetToolPath)' == '' OR !Exists('$(NuGetToolPath)') "/>
    <Message Text="NuGetToolPath=$(NuGetToolPath)" Importance="Low" />
  </Target>

</Project>